Problem:

Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".

Example 1:
Input: strs = ["flower","flow","flight"]
Output: "fl"

Example 2:
Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.



Solution:
//Approach 1:
//Space Complexity: O(n*m)
//Time Complexity: O(n*m)

class TrieNode{
    public:
    char data;
    // Array to store child nodes for each alphabet letter
    TrieNode* children[26];
    int childCount = 0;
    bool isTerminal;

    //constructor
    TrieNode(char ch){
        data = ch;
        // Initialize all children to null
        for(int i=0; i<26; i++){
            children[i] = NULL;
        }
        isTerminal = false;
    }
};

class Trie{
    public:
    TrieNode* root;
    Trie(char ch){
        root = new TrieNode(ch);
    }
    // Helper function to insert a word into the Trie recursively
    void insertUtil(TrieNode* root, string word){
        //base case
        if(word.length() == 0){
            root->isTerminal = true;
            return;
        }
         // Find the index for the current character
        int index = word[0] - 'a';
        TrieNode* child;

        //present
        if(root->children[index] != NULL){
            child = root->children[index];
        }
        else{
            //absent
            child = new TrieNode(word[0]);
            root->childCount++;
            root->children[index] = child;
        }

        //recursion
        insertUtil(child, word.substr(1));
    }

    void insertWord(string word){
        insertUtil(root, word);
    }

    // Function to find the longest common prefix
    void lcp(string str, string &ans){
        for(int i=0;i<str.length();i++){
            char ch = str[i];

            // If there is only one child, it's part of the common prefix
            if(root->childCount == 1){
                ans.push_back(ch);
                //aage badhjao
                int index = ch - 'a';
                root = root->children[index];
            }
            else{
                break;
            }
            if(root->isTerminal){
                break;
            }
        }
    }
};
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty()){
            return "";
        }
        // Check for any empty string in the input vector
        for(string str : strs){
            if(str.empty()){
                return "";
            }
        }
        // Create a new Trie with a root node
        Trie* t = new Trie('\0');

        //insert all strings into trie
        for(int i=0;i<strs.size();i++){
            t->insertWord(strs[i]);
        }
        // Take the first string
        string first = strs[0];
        string ans = "";

         // Find the longest common prefix using the first string
        t->lcp(first, ans);
        return ans;
    }
};



//Approach 2:
//Time Complexity: O(nlogn + m)
//Space Complexity: O(m)

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
       string ans = "";
       //Sort the array
        sort(strs.begin(), strs.end());
        int n = strs.size();
        string a = strs[0];
        string b = strs[n-1];

        //Compare first and last string of an array
        for(int i=0;i<a.size();i++){
            if(a[i] == b[i]){
                ans = ans + a[i];
            }
            else{
              break;
            }
        }
        return ans;  
    }
};
