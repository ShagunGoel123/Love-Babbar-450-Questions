Problem:

Given two BSTs containing N1 and N2 distinct nodes respectively and given a value x,
your task is to complete the function countPairs(), that returns the count of all
pairs of (a, b), where a belongs to one BST and b belongs to another BST, such that a + b = x.

Example 1:
Input:
BST1:
       5
     /   \
    3     7
   / \   / \
  2   4 6   8

BST2:
       10
     /    \
    6      15
   / \    /  \
  3   8  11   18
x = 16
Output:
3
Explanation:
The pairs are: (5, 11), (6, 10) and (8, 8)


Example 2:

Input:
BST1:
  1
   \
    3
   /
  2

BST2:
    3
   / \
  2   4
 /     
1
x = 4
Output:
3
Explanation:
The pairs are: (2, 2), (3, 1) and (1, 3)



Solution:

//Time Complexity: O(n1+n2)
//Space Complexity: O(n1+n2)

class Solution
{
public:

    //Find inorder
    void inorder(Node* root, vector<int> &arr){
        if(root == NULL){
            return;
        }
        inorder(root->left, arr);
        arr.push_back(root->data);
        inorder(root->right, arr);
    }
    int countPairs(Node* root1, Node* root2, int x)
    {
        vector<int>arr1;
        vector<int>arr2;
        
        inorder(root1, arr1);
        inorder(root2, arr2);
        
        int i=0, j=arr2.size()-1;
        int count = 0;
        
        // Find pairs using two-pointer technique
        while(i<arr1.size() && j>=0){
            if(arr1[i] + arr2[j] == x){
                count++;
                i++;
                j--;
            }
            else if(arr1[i] + arr2[j] >x){
                j--;
            }
            else{
                i++;
            }
        }
        return count;
    }
};




