Problem:

Given a binary tree. Find the size of its largest subtree that is a Binary Search Tree.
Note: Here Size is equal to the number of nodes in the subtree.

Example 1:
Input:
        1
      /   \
     4     4
   /   \
  6     8
Output: 1
Explanation: There's no sub-tree with size
greater than 1 which forms a BST. All the
leaf Nodes are the BSTs with size equal
to 1.


Example 2:
Input: 6 6 3 N 2 9 3 N 8 8 2
            6
        /       \
       6         3
        \      /   \
         2    9     3
          \  /  \
          8 8    2 
Output: 2
Explanation: The following sub-tree is a
BST of size 2: 
       2
    /    \ 
   N      8



Solution:

//Time Complexity: O(N)
//Space Complexity: O(H)

class info{
    public:
    int max;
    int min;
    bool isBST;
    int size;
};

class Solution{
    public:
    info solve(Node* root, int &ans){
        
        //base case
        if(root == NULL){
            return {INT_MIN, INT_MAX, true, 0};
        }
        
        //Recursive calls
        info left = solve(root->left, ans);
        info right = solve(root->right, ans);
        
        info currNode;
        currNode.size = left.size + right.size + 1;
        currNode.max = max(root->data, right.max);
        currNode.min = min(root->data, left.min);
        
        if(left.isBST && right.isBST && (root->data > left.max && root->data < right.min)){
            currNode.isBST = true;
        }
        else{
            currNode.isBST = false;
        }
        
        //answer update
        if(currNode.isBST){
            ans = max(ans, currNode.size);
        }
        return currNode;
    }

    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	int maxSize = 0;
    	info temp = solve(root, maxSize);
    	return maxSize;
    }
};
