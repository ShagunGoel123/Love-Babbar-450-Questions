Problem:

Given a Binary Tree, convert it to Binary Search Tree in such a way
that keeps the original structure of Binary Tree intact.

Example 1:
Input:
      1
    /   \
   2     3
Output: 
1 2 3
Explanation:
The converted BST will be 
      2
    /   \
   1     3


Example 2:
Input:
          1
       /    \
     2       3
   /        
 4       
Output: 
1 2 3 4
Explanation:
The converted BST will be

        3
      /   \
    2     4
  /
 1



Solution:

//Time Complexity: O(NlogN)
//Space Complexity: O(N)

class Solution{
  public:
     void inorder(Node* root, vector<int> &ans){
         if(root == NULL){
             return;
         }
         inorder(root->left, ans);
         ans.push_back(root->data);
         inorder(root->right, ans);
     }
     
     Node* inorderToBST(int s, int e, vector<int> &ans){
         if(s > e){
             return NULL;
         }
         int mid = (s+e)/2;
         
         //create root node
         Node* root = new Node(ans[mid]);
         
         //recursive calls
         root->left = inorderToBST(s, mid-1, ans);
         root->right = inorderToBST(mid+1, e, ans);
         
         return root;
     }
  
    // Return the root of the generated BST
    Node *binaryTreeToBST (Node *root)
    {
        vector<int>ans;
        
        //Step1: Find inorder of BT
        inorder(root,ans);
        
        //Step2: Sort the inorder because inorder of BST is in sorted form
        sort(ans.begin(), ans.end());
        
        //Step3: create BST from sorted inorder
        return inorderToBST(0, ans.size()-1, ans);
    }
};
