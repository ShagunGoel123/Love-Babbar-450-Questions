Problem:

Given a Binary Search Tree and a node value X, find if the node with value X is present in the BST or not.

Example 1:
Input:         2
                \
                 81 
               /    \ 
             42      87 
              \       \ 
               66      90 
              / 
            45
X = 87
Output: 1
Explanation: As 87 is present in the
given nodes , so the output will be
1.


Example 2:
Input:      6
             \ 
              8 
             / \ 
            7   9
X = 11
Output: 0
Explanation: As 11 is not present in 
the given nodes , so the output will
be 0.



Solution:

//Approach 1: Recursive Approach
//Time Complexity: O(H)
//Space Complexity: O(H)

bool search(struct Node* root, int x) {
    //base case
    if(root == NULL){
        return 0;
    }
    
    if(root->data == x){
        return 1;
    }
    
    if(root->data > x){
        //left part me
        return search(root->left, x);
    }
    
    else{
        //right part me
        return search(root->right, x);
    }
}



//Approach 2: Iterative way- Optimized Approach
//Time Complexity: O(H)
//Space Complexity: O(1)

bool search(struct Node* root, int x) {
    
    while(root != NULL){
       if(root->data == x){
           return 1;
       }
        
        if(root->data > x){
            root = root->left;
        }
        else{
            root = root->right;
        }
    }
    return 0;
}
