Problem:

Given an array arr[ ] of size N consisting of distinct integers,
write a program that returns 1 if given array can represent preorder traversal of a possible BST, else returns 0.

Example 1:
Input:
N = 3
arr = {2, 4, 3}
Output: 1
Explaination: Given arr[] can represent
preorder traversal of following BST:
               2
                \
                 4
                /
               3


Example 2:
Input:
N = 3
Arr = {2, 4, 1}
Output: 0
Explaination: Given arr[] cannot represent
preorder traversal of a BST.



Solution:
/* Algo:
1. Takes a vector of integers as input.
2. Uses a stack to keep track of the nodes and an integer root initialized to the minimum possible integer value.
3. Iterates through the array and performs the following checks:
   If the current value is less than root, it means the array cannot represent a preorder traversal of a BST, so return 0.
   While the stack is not empty and the top of the stack is less than the current value, pop the stack and update root.
   Push the current value onto the stack.
4. If the entire array is processed without violating the BST properties, return 1. */

//Time Complexity: O(n)
//Space Complexity: O(n)

class Solution {
  public:
    int canRepresentBST(int arr[], int N) {
        stack<int>s;
        int root = INT_MIN;
        for(int i=0;i<N;i++){
            if(arr[i] < root){
                return 0;
            }
            
            while(!s.empty() && s.top() < arr[i]){
                root = s.top();
                s.pop();
            }
            // Push the current value to the stack
            s.push(arr[i]);
            
        }
        return 1;
    }
};
