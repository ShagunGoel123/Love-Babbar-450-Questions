Problem:

There is BST given with the root node with the key part as an integer only. 
You need to find the in-order successor and predecessor of a given key. 
If either predecessor or successor is not found, then set it to NULL.

Note:- In an inorder traversal the number just smaller than the target is the predecessor
and the number just greater than the target is the successor. 


Example 1:
Input:
      8
    /   \
   1     9
    \     \
     4    10
    /
   3
key = 8 Output: 
4 9 Explanation: 
In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.


Example 2:
Input:
        10
      /   \
     2    11
   /  \ 
  1    5
      /  \
     3    6
      \
       4
key = 11 Output: 
10 -1 Explanation: 
In given BST, the inorder predecessor of 11 is 10 whereas it does not have any inorder successor.



Solution:

//Time Complexity: O(H)
//Space Complexity: O(1)

class Solution
{
    public:
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        Node* temp = root;
        pre = NULL;
        suc = NULL;
        
        while(temp != NULL){
            if(temp->key < key){
                pre = temp;
                temp = temp->right;
            }
            else{
                temp = temp->left;
            }
        }
        temp = root;
        while(temp != NULL){
            if(temp->key <= key){
                temp = temp->right;
            }
            else{
                suc = temp;
                temp = temp->left;
            }
        }
        
    }
};
