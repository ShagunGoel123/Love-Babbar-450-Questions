Problem:

Given a Binary Search Tree, modify the given BST such that it is balanced and has minimum possible height.
Return the balanced BST.

Example1:
Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30


Example2:
Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   
    \          /                  \ 
     2        1                    4



Solution:

//Time Complexity: O(N)
//Space Complexity: O(N)

class Solution{
    public:
    void inorder(Node* root, vector<int> &in){
        if(root == NULL){
            return;
        }
        inorder(root->left, in);
        in.push_back(root->data);
        inorder(root->right, in);
    }
    
    Node* inorderToBST(int s, int e, vector<int> &in){
        //base case
        if(s > e){
            return NULL;
        }
        
        int mid = (s+e)/2;
        
        //create new node and insert the mid value of inorder in this node
        Node* root = new Node(in[mid]);
        
        //recursive call
        root->left = inorderToBST(s, mid-1, in);
        root->right = inorderToBST(mid+1, e, in);
        return root;
    }
    
    // function should return root of the modified BST
    Node* buildBalancedTree(Node* root)
    {
    	vector<int> inorderVal;
    	
    	//Store inorder
    	inorder(root, inorderVal);
    	
    	return inorderToBST(0, inorderVal.size()-1, inorderVal);
    }
};
