Problem:

Given a Binary Search Tree (with all values unique) and two node values n1 and n2 (n1!=n2).
Find the Lowest Common Ancestors of the two nodes in the BST.

Example 1:
Input:
              5
            /   \
          4      6
         /        \
        3          7
                    \
                     8
n1 = 7, n2 = 8
Output: 7


Example 2:
Input:
     2
   /   \
  1     3
n1 = 1, n2 = 3
Output: 2



Solution:

//Approach 1: Solve Recursively
//Time Complexity: O(H), Space Complexity: O(H)

class Solution{
    public:
        Node* LCA(Node *root, int n1, int n2)
        {
            //base case
            if(root == NULL){
                return NULL;
            }
            
            if(root->data < n1 && root->data < n2){
                return LCA(root->right, n1, n2);
            }
            
            if(root->data > n1 && root->data > n2){
                return LCA(root->left, n1, n2);
            }
            
            return root;
        }

};


//Approach 2: Solve Iteratively - Optimized approach
//Time Complexity: O(H), Space Complexity: O(1)

class Solution{
    public:
        Node* LCA(Node *root, int n1, int n2)
        {
            while(root != NULL){
                if(root->data < n1 && root->data < n2){
                    root = root->right;
                }
                
                else if(root->data > n1 && root->data > n2){
                    root = root->left;
                }
                
                else{
                    return root;
                }
            }
        }

};
