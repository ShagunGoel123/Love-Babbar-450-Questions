Problem:

Given a BST and an integer K. Find the Kth Smallest element in the BST using O(1) extra space. 

Example 1:
Input:
      2
    /   \
   1     3
K = 2
Output: 2
Explanation: 2 is the 2nd smallest element in the BST


Example 2:
Input:
        2
      /  \
     1    3
K = 5
Output: -1
Explanation: There is no 5th smallest element in the BST as the size of BST is 3



Solution:

//Approach 1: Time Complexity:O(n), Space Complexity:O(H)

class Solution {
  public:
    int solve(Node* root, int &i, int k){
        //base case
        if(root == NULL)
            return -1;
            
        //L    
        int left = solve(root->left, i, k);
        
        if(left != -1){
            return left;
        }
        
        //N
        i++;
        if(i == k){
            return root->data; 
        }
        
        //R
        return solve(root->right, i, k);
    }
    // Return the Kth smallest element in the given BST
    int KthSmallestElement(Node *root, int K) {
        int i = 0;
        int ans = solve(root,i,K);
        return ans;
    }
};




//Approach 2: Optimized approach
//Time Complexity: O(n), Space Complexity: O(1) by using Morris Traversal

class Solution {
  public:
    // Return the Kth smallest element in the given BST
    int KthSmallestElement(Node *root, int K) {
       while(root != NULL){

           //The problem of storing a pointer back to root only exists if root has a
          // left subtree, so let's first handle the case where we don't have a left subtree to worry about.      
           if(root->left == NULL){
               if(K == 1){
                   return root->data;
               }
               K-=1;
               root = root->right;
           }
           else{

               //Now since we know we have a left subtree, before we look at 
              //that left subtree, we need to find the rightmost child of the left subtree.
               Node* pre = root->left;
               while(pre->right != NULL && pre->right != root){
                   pre = pre->right;
               }
               if(pre->right == NULL){
                   pre->right = root;
                   root = root->left;
               }
               else{

                  // We found that the rightmost child of the left subtree is pointing
                  //at root already! So revert the change we made before, and consider
                  //root value, because this means we have processed all the nodes in 
                  // the left subtree, and we can now move to right's subtree.
                   pre->right = NULL;
                   if(K == 1)
                      return root->data;
                    K-=1;
                    root = root->right;
               }
           }
       }
       return -1;
    }
};

