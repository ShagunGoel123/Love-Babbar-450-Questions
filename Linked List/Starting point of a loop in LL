Problem:

https://leetcode.com/problems/linked-list-cycle-ii/description/


Solution:

//Time Complexity: O(n)
//Space Complexity: O(1)

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode* slow = head;
        ListNode* fast = head;

        //Step1: Detect loop
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;

            if(slow == fast){
                slow = head;

                //step2: find first node of loop
                while(slow != fast){
                    slow = slow->next;
                    fast = fast->next;
                }
                return slow;
            }
        }
        return NULL;  
    }
};
