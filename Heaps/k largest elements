Problem:

Given an array Arr of N positive integers and an integer K, find K largest elements from the array. 
The output elements should be printed in decreasing order.

Example 1:
Input:
N = 5, K = 2
Arr[] = {12, 5, 787, 1, 23}
Output: 787 23
Explanation: 1st largest element in the
array is 787 and second largest is 23.

Example 2:
Input:
N = 7, K = 3
Arr[] = {1, 23, 12, 9, 30, 2, 50}
Output: 50 30 23
Explanation: 3 Largest element in the
array are 50, 30 and 23.



Solution:

//Time Complexity: O(nlogk)
//Space Complexity: O(k)

class Solution{
public:	
	vector<int> kLargest(int arr[], int n, int k) {
	    
	    //Step1: Create Min heap of size k
	   priority_queue<int, vector<int>, greater<int>> pq;
	   for(int i=0;i<k;i++){
	       pq.push(arr[i]);
	   }
	   
	   //Step2:
	   for(int i=k;i<n;i++){
	       if(arr[i] > pq.top()){
	           pq.pop();
	           pq.push(arr[i]);
	       }
	   }
	   
	   //Step3: Extract elements from the heap
	   vector<int> ans;
	   while(!pq.empty()){
	       ans.push_back(pq.top());
	       pq.pop();
	   }
	   
	   //Step4: sort ans in decreasing order
	   sort(ans.begin(), ans.end(), greater<int>());
	   return ans;
	}
};
