Problem:

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.


Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6


Example 2:
Input: lists = []
Output: []


Example 3:
Input: lists = [[]]
Output: []



Solution:

//Time Complexity: O((k+n)logk) where 𝑘 is the number of linked lists and 𝑁 is the total number of nodes across all lists.
//Space Complexity: O(k)


// Comparator for the priority queue (min-heap).
// It ensures that the node with the smallest value is at the top.
class compare{
public:
    bool operator()(ListNode* a, ListNode* b){
        return a->val > b->val;
    }
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {

        //Create min heap
        priority_queue<ListNode*, vector<ListNode*>, compare> minHeap;
        int k = lists.size();

         // If there are no lists, return NULL.
        if(k==0){
            return NULL;
        }

        // Push the first node of each list into the min-heap.
        for(int i=0;i<k;i++){
            if(lists[i] != NULL){
                minHeap.push(lists[i]);
            }
        }

        ListNode* head = NULL;
        ListNode* tail = NULL;

       // While there are elements in the min-heap
        while(minHeap.size() > 0){

            // Get the smallest element from the min-heap.
            ListNode* top = minHeap.top();
            minHeap.pop();

            if(head == NULL){
                head = top;
                tail = top;
                if(tail->next != NULL){
                    minHeap.push(tail->next);
                }
            }
            else{
                tail->next = top;
                tail = top;

                // If the added node has a next node, push it into the min-heap.
                if(tail->next != NULL){
                    minHeap.push(tail->next);
                }
            }
        }
        return head;
    }
};
 
