Problem:

You are given an array Arr of size N. You have to find the K-th largest sum 
of contiguous subarray within the array elements. In other words,
overall subarrays, find the subarray with kth largest sum and return its sum of elements.


Example 1:
Input:
N = 3
K = 2
Arr = {3,2,1}
Output:
5
Explanation:
The different subarray sums we can get from the array
are = {6,5,3,2,1}. Where 5 is the 2nd largest.
 

Example 2:
Input:
N = 4
K = 3
Arr = {2,6,4,1}
Output:
11
Explanation:
The different subarray sums we can get from the array
are = {13,12,11,10,8,6,5,4,2,1}. Where 11 is the 3rd largest.



Solution:

//Approach 1:
//Time Complexity: O(n^2 * log n)
//Space Complexity: O(n^2)

class Solution{
public:
    int kthLargest(vector<int> &Arr,int N,int K){
        vector<int> sumStore;
        for(int i=0;i<N;i++){
            int sum = 0;
            for(int j=i;j<N;j++){
                sum+=Arr[j];
                sumStore.push_back(sum);
            }
        }
        sort(sumStore.begin(), sumStore.end());
         return sumStore[sumStore.size() - K];
    }   
};




//Approach 2: Optimized approach by using minHeap
//Time Complexity: O(n^2 log K)
//Space Complexity: O(K)


class Solution{
public:
    int kthLargest(vector<int> &Arr,int N,int K){
        //create min heap
        priority_queue<int, vector<int>, greater<int>> mini;
        
        for(int i=0;i<N;i++){
            int sum = 0;
            for(int j=i;j<N;j++){
                sum += Arr[j];
                if(mini.size() < K){
                    mini.push(sum);
                }
                else if(sum > mini.top()){
                    mini.pop();
                    mini.push(sum);
                }
            }
        }
        // The K-th largest sum is at the top of the min-heap
        return mini.top();
    }
};
