Problem:

Given a binary tree. The task is to check whether the given tree follows the max heap property or not.
Note: Properties of a tree to be a max heap - Completeness and Value of node greater than or equal to its child.

Example 1:
Input:
      5
    /  \
   2    3
Output: 1
Explanation: The given tree follows max-heap property since 5,
is root and it is greater than both its children.

Example 2:
Input:
       10
     /   \
    20   30 
  /   \
 40   60
Output: 0



Solution:

/* Algo:
1. Count the total number of nodes using countNodes.
2. Check if the tree is a complete binary tree using isCBT.
3. Check if the tree satisfies the max-heap property using isMaxOrder.
4. Return true if both conditions are satisfied, otherwise return false.
*/

//Time Complexity: O(n)
//Space Complexity: O(n)

class Solution {
  public:
    
    int countNodes(struct Node* root){
        //base case
        if(root == NULL){
            return 0;
        }
        else{
            int ans = 1 + countNodes(root->left) + countNodes(root->right);
            return ans;
        }
    }

   //check it is complete binary tree or not
    bool isCBT(struct Node* root, int i, int cnt){
        if(root == NULL){
            return true;
        }
        if(i >= cnt){
            return false;
        }
        else{
            bool left = isCBT(root->left, 2*i+1, cnt);
            bool right = isCBT(root->right, 2*i+2, cnt);
            return (left && right);
        }
    }

    // check it follows max heap property or not
    bool isMaxOrder(struct Node* root){
        
        //leaf Node
        if(root->left==NULL && root->right==NULL){
            return true;
        }
        
        //only one child
        if(root->right == NULL){
            return (root->data > root->left->data);
        }
        
        //both child exists
        else{
            bool left = isMaxOrder(root->left);
            bool right = isMaxOrder(root->right);
            return (left && right && 
            (root->data > root->left->data && root->data > root->right->data));
        }
    }
    bool isHeap(struct Node* tree) {
        int index = 0;

        //count total number of nodes
        int totalCount = countNodes(tree);

        if(isCBT(tree,index,totalCount) && isMaxOrder(tree)){
            return true;
        }
        else{
            return false;
        }
    }
};
