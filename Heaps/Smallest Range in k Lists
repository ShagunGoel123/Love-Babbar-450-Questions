Problem:

You have k lists of sorted integers in non-decreasing order.
Find the smallest range that includes at least one number from each of the k lists.
We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

Example 1:
Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].

Example 2:
Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]



Solution:

//Time Complexity: O(n*klogk)
//Space Complexity: O(k)

class node{
    public:
    int data;
    int row;
    int col;
    node(int d, int r, int c){
        data = d;
        row = r;
        col = c;
    }
};

class compare{
    public:
    bool operator()(node* a, node* b){
        return a->data > b->data;
    }
};

class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
        int mini = INT_MAX;
        int maxi = INT_MIN;

        //Create min heap
        priority_queue<node*, vector<node*>, compare> minHeap;
        int k = nums.size();

        //maintain max while processing first element of each array
        for(int i=0;i<k;i++){
            int element = nums[i][0];
            maxi = max(maxi, element);
            minHeap.push(new node(element, i, 0));
        }
        mini = minHeap.top()->data;
        int start = mini, end = maxi;

        //process all the remaining element by increasing mini
        while(!minHeap.empty()){
            node* temp = minHeap.top();
            minHeap.pop();

            mini = temp->data;
            //update range
            if(maxi-mini < end-start){
                start = mini;
                end = maxi;
            }
            int row = temp->row, col = temp->col;
            int n = nums[row].size();
            //add next element infront of mini if within array
            if(col+1 < n){
                maxi = max(maxi, nums[row][col+1]);
                minHeap.push(new node(nums[row][col+1], row, col+1));
            }
            //one of the array is fully traveresed!!
            else{
                break;
            }
        }
        return {start, end};  
    }
};
