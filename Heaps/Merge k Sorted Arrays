Problem:

Given K sorted arrays arranged in the form of a matrix of size K*K. The task is to merge them into one sorted array.

Example 1:
Input:
K = 3
arr[][] = {{1,2,3},{4,5,6},{7,8,9}}
Output: 1 2 3 4 5 6 7 8 9
Explanation:Above test case has 3 sorted
arrays of size 3, 3, 3
arr[][] = [[1, 2, 3],[4, 5, 6], 
[7, 8, 9]]
The merged list will be 
[1, 2, 3, 4, 5, 6, 7, 8, 9].


Example 2:
Input:
K = 4
arr[][]={{1,2,3,4},{2,2,3,4},
         {5,5,6,6},{7,8,9,9}}
Output:
1 2 2 2 3 3 4 4 5 5 6 6 7 8 9 9 
Explanation: Above test case has 4 sorted
arrays of size 4, 4, 4, 4
arr[][] = [[1, 2, 2, 2], [3, 3, 4, 4],
[5, 5, 6, 6], [7, 8, 9, 9 ]]
The merged list will be 
[1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 
6, 6, 7, 8, 9, 9].



Solution:

//Time Complexity: O(k^2 log k)
//Space Complexity: O(k^k)

class node{
    public:
        int data;
        int i,j;
        node(int data,int row,int col){
            this->data = data;
            i = row;
            j = col;
        }
};

class compare{
    public:
    bool operator()(node* a, node* b){
      return a->data > b->data;
    }
    
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        priority_queue<node*, vector<node*>, compare>minHeap;
        
        // Step 1: Insert the first element of each array into the min-heap
        for(int i=0;i<K;i++){
            node* temp = new node(arr[i][0], i, 0);
            minHeap.push(temp);
        }
        vector<int> ans;
        //Step2:
        while(minHeap.size()>0){
            node* temp = minHeap.top();
            ans.push_back(temp->data);
            minHeap.pop();
            
            //array ka next element push krdo
            int i = temp->i;
            int j = temp->j;
            if(j+1 < arr[i].size()){
                node* next = new node(arr[i][j+1], i, j+1);
                minHeap.push(next);
            }
        }
        return ans;
    }
};
