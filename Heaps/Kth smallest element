Problem:

Given an array arr[] and an integer k where k is smaller than the size of the array, 
the task is to find the kth smallest element in the given array.
It is given that all array elements are distinct.
Note:-  l and r denotes the starting and ending index of the array.

Example 1:
Input:
n = 6
arr[] = 7 10 4 3 20 15
k = 3
l=0 r=5

Output : 
7
Explanation :
3rd smallest element in the given 
array is 7.


Example 2:
Input:
n = 5
arr[] = 7 10 4 20 15
k = 4 
l=0 r=4

Output : 
15
Explanation :
4th smallest element in the given 
array is 15.



Solution:

/*Algo:

Step1: Insert the first k elements of the array into the max-heap.
Step2: For each element from the (k+1)-th to the last:
       If the element is smaller than the root of the max-heap:
       Remove the root of the max-heap.
       Insert the current element into the max-heap.
Step3: The root of the max-heap is the k-th smallest element.
*/


//Space Complexity: O(k)
//Time Complexity: O(nlogk)

class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
        
        //Step1: Create Max heap
       priority_queue<int> pq;
       for(int i=0;i<k;i++){
           pq.push(arr[i]);
       }
       //Step2
       for(int i=k;i<=r;i++){
           if(arr[i] < pq.top()){
               pq.pop();
               pq.push(arr[i]);
           }
       }
       //Step3
       int ans = pq.top();
       return ans;
    }
};
