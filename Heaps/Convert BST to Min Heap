Problem:

You are given a 'ROOT' of a binary search tree of integers. The given BST is also a complete binary tree.
Your task is to convert the given binary search tree into a Min Heap and print the preorder 
traversal of the updated binary search tree.

Note:

Binary Search Tree is a node-based binary tree data structure that has the following properties:
1. The left subtree of a node contains only nodes with keys lesser than the node’s key.
2. The right subtree of a node contains only nodes with keys greater than the node’s key.
3. The left and right subtree each must also be a binary search tree.

A Binary Heap is a Binary Tree with the following property:
1. It’s a complete tree (all levels are filled except possibly the last level
and the last level has all keys as left as possible).
This property of Binary Heap makes them suitable to be stored in an array.

A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap,
the key at the root must be minimum among all keys present in Binary Heap.
The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to Min Heap.


For example:
Given:- BST’s ‘ROOT’ = 4 2 6 -1 -1 -1 -1 
Then the min-heap in pre-order fashion would be 2 4 6.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
1
8 5 10 2 6 -1 -1 -1 -1 -1 7 -1 -1
10 7 11 1 8 -1 -1 -1 -1 -1 -1 
Sample Output 1:
2 5 6 7 8 10
1 7 8 10 11
Explanation of sample input 1:
Test-Case 1 : 
Converting the BST into min-heap and its pre-order printing would look like: 2 5 6 7 8 10.


Test-Case 2 :
Converting the BST into min-heap and its pre-order printing would look like: 2 5 6 7 8 10.
Sample Input 2:
2
4 2 6 1 3 5 7 -1 -1 -1 -1 -1 -1 -1 -1
2 1 3 -1 -1 -1 -1
Sample Output 2:
1 2 3 4 5 6 7
1 2 3    



Solution:

//Time Complexity: O(n)
//Space Complexity: O(n)

void getinorder(BinaryTreeNode* root,vector<int> &v){

    if(!root){
        return;
    }

    getinorder(root->left,v);
    v.push_back(root->data);
    getinorder(root->right,v);
}

void fillpreorder(BinaryTreeNode* &root,vector<int> inorder,int &i){

    if(!root){
        return;
    }

    root->data = inorder[i++];
    fillpreorder(root->left,inorder,i);
    fillpreorder(root->right,inorder,i);
}

BinaryTreeNode* convertBST(BinaryTreeNode* root)
{
    //step1: get inorder of bst which is in sorted order
    vector<int> inorder;
    getinorder(root,inorder);

   //step 2: min order && for all  L data < for all  R  data => N<L<R which is a preorder
    int i=0;
    fillpreorder(root,inorder,i);
    return root;
}

