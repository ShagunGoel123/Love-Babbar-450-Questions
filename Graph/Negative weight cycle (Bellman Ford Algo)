Problem:

Given a weighted directed graph with n nodes and m edges.
Nodes are labeled from 0 to n-1, the task is to check if it contains a negative weight cycle or not.
Note: edges[i] is defined as u, v and weight.
 
Example 1:
Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,-3}}
Output: 1
Explanation: The graph contains negative weight
cycle as 0->1->2->0 with weight -1,-2,-3.

Example 2:
Input: n = 3, edges = {{0,1,-1},{1,2,-2},
{2,0,3}}
Output: 0
Explanation: The graph does not contain any
negative weight cycle.



Solution:

//Time Complexity: O(n^2*m)
//Space Complexity: O(n+m)

class Solution {
public:
    int isNegativeWeightCycle(int n, vector<vector<int>> edges) {
        // For each vertex as the source, apply Bellman-Ford algorithm
        for (int i = 0; i < n; i++) {
            // Step 1: Initialize distances to all vertices as infinity (1e9) except the source.
            vector<int> dist(n, 1e9);
            dist[i] = 0;  // Assume i is the source
            
            // Step 2: Relax all edges (n-1) times
            for (int j = 0; j < n - 1; j++) {
                for (auto &edge : edges) {
                    int u = edge[0];
                    int v = edge[1];
                    int w = edge[2];
                    
                    if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
                        dist[v] = dist[u] + w;
                    }
                }
            }
            
            // Step 3: Check for negative weight cycles
            for (auto &edge : edges) {
                int u = edge[0];
                int v = edge[1];
                int w = edge[2];
                
                // If we can still relax an edge, there is a negative weight cycle
                if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
                    return 1; // Negative weight cycle found
                }
            }
        }
        return 0; // No negative weight cycle
    }
};
