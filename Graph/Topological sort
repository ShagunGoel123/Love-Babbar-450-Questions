Problem:

https://www.geeksforgeeks.org/problems/topological-sort/1


Solution:

//Approach 1 - By using DFS
//Time Complexity: O(V+E)
//Space Complexity: O(V+E)

class Solution
{
	public:
	void topologicalSort(int node, unordered_map<int, bool>& visited,
	stack<int>& s, vector<int> adj[]){
	    // Mark the current node as visited.
	    visited[node] = 1;
	    
	    // Recursively visit all the adjacent nodes that are not visited.
	    for(auto neighbour: adj[node]){
	        if(!visited[neighbour]){
	            topologicalSort(neighbour, visited, s, adj);
	        }
	    }
	        
	    // Push the current node onto the stack after visiting all its adjacent nodes.     
	    s.push(node);
	    
	}
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    unordered_map<int, bool> visited;
	    
	    // Create a stack to store the topological order.
	    stack<int> s;
	    
	    for(int i=0;i<V;i++){
	        if(!visited[i]){
	            topologicalSort(i, visited, s, adj);
	        }
	    }
	                  
	    vector<int> ans;
	    // Pop all nodes from the stack and store them in the result vector.
	    while(!s.empty()){
	        ans.push_back(s.top()); 
	        s.pop();
	    }
	    return ans;
	}
};




//Approach 2 - BY using BFS(Kahn's Algorithm)
//Time Complexity: O(V+E)
//Space Complexity: O(V+E)

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    //find all indegrees
	    vector<int> indegree(V);
	    for(auto i=0;i<V;i++){
	        for(auto j: adj[i]){
	            indegree[j]++;
	        }
	    }
	    
	     // Push all vertices with 0 in-degree into the queue
	    queue<int> q;
	    for(int i=0;i<V;i++){
	        if(indegree[i] == 0){
	            q.push(i);
	        }
	    }
	    
	    //do bfs
	    vector<int> ans;
	    while(!q.empty()){
	        int front = q.front();
	        q.pop();
	        
	        // Store the current vertex in the answer
	        ans.push_back(front);
	        
	        //neighbour indegree update
	        for(auto neighbour: adj[front]){
	            indegree[neighbour]--;
	            if(indegree[neighbour] == 0){
	                q.push(neighbour);
	            }
	        }
	    }
	    return ans;
	}
};
