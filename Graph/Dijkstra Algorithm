Problem:

https://www.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card


Solution:

//Approach 1: By using priority queue
//Time Complexity: O((E+V)logV)
//Space Complexity: O(V+E)

#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    // Function to find the shortest distance of all the vertices
    // from the source vertex S.
    vector<int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {

        // Create a priority queue for storing the nodes as a pair {dist,node}
        // where dist is the distance from source to the node. 
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        // Initialising distTo list with a large number to
        // indicate the nodes are unvisited initially.
        // This list contains distance from source to the nodes.
        vector<int> distTo(V, INT_MAX);

        // Source initialised with dist=0.
        distTo[S] = 0;
        pq.push({0, S});

        // Now, pop the minimum distance node first from the min-heap
        // and traverse for all its adjacent nodes.
        while (!pq.empty())
        {
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();

            // Check for all adjacent nodes of the popped out
            // element whether the prev dist is larger than current or not.
            for (auto it : adj[node])
            {
                int nodeDist = it[0];
                int edgeWeight = it[1];
                if (dis + edgeWeight < distTo[nodeDist])
                {
                    distTo[nodeDist] = dis + edgeWeight;
    
                    // If current distance is smaller,
                    // push it into the queue.
                    pq.push({dis + edgeWeight, nodeDist});
                }
            }
        }
        // Return the list containing shortest distances
        // from source to all the nodes.
        return distTo;
    }
};



//Approach 2: By using set
//Time Complexity: O((E+V)logV)
//Space Complexity: O(V+E)

class Solution {
public:
    // Function to find the shortest distance of all the vertices from the source vertex S.
    vector<int> dijkstra(int V, vector<pair<int, int>> adj[], int S) {
        // Creation of distance array with infinite value initially
        vector<int> dist(V, INT_MAX);
        
        // Creation of set on basis (distance, node)
        set<pair<int, int>> st;
        
        // Initialize distance and set with source node
        dist[S] = 0;
        st.insert(make_pair(0, S));
        
        while(!st.empty()) {
            // Fetch top record
            auto top = *(st.begin());
            int nodeDistance = top.first;
            int topNode = top.second;
            
            // Remove top record now
            st.erase(st.begin());
            
            // Traverse on neighbours
            for(auto neighbour : adj[topNode]) {
                int neighborNode = neighbour.first;
                int edgeWeight = neighbour.second;
                
                if(nodeDistance + edgeWeight < dist[neighborNode]) {
                    auto record = st.find(make_pair(dist[neighborNode], neighborNode));
                    
                    // If record found, then erase it
                    if(record != st.end()) {
                        st.erase(record);
                    }
                    
                    // Distance update
                    dist[neighborNode] = nodeDistance + edgeWeight;
                    
                    // Record push in set
                    st.insert(make_pair(dist[neighborNode], neighborNode));
                }
            }
        }
        return dist;
    }
};

