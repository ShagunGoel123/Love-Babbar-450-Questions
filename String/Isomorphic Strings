Problem:

Given two strings s and t, determine if they are isomorphic.
Two strings s and t are isomorphic if the characters in s can be replaced to get t.
All occurrences of a character must be replaced with another character while preserving the order of characters.
No two characters may map to the same character, but a character may map to itself.

Example 1:
Input: s = "egg", t = "add"
Output: true

Example 2:
Input: s = "foo", t = "bar"
Output: false

Example 3:
Input: s = "paper", t = "title"
Output: true



Solution:

class Solution {
public:
    bool isIsomorphic(string s, string t) {
        if(s.length() != t.length()){
            return false;
        }
        unordered_map<char,char>mp1;
        unordered_map<char,char>mp2;

        for(int i=0;i<s.length();i++){
            // if any char from s is not mapped to any char of t then maps it
            if(mp1[s[i]] == 0){
                mp1[s[i]] = t[i];
            }

            //if it's already mapped but with different char,return false
            else if(mp1[s[i]] != t[i]){
                return false;
            }

            if(mp2[t[i]] == 0){
                mp2[t[i]] = s[i];
            }
            else if(mp2[t[i]] != s[i]){
                return false;
            }
        }
        return true;
    }
};
 
